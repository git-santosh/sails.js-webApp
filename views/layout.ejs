<!DOCTYPE html>
<html>
  <head>
    <title><%=typeof title == 'undefined' ? 'New Sails App' : title%></title>

    <!-- Viewport mobile tag for sensible mobile support -->
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">

		
    <!--
        Stylesheets and Preprocessors
        ==============================

        You can always bring in CSS files manually with `<link>` tags, or asynchronously
        using a solution like AMD (RequireJS).  Or, if you like, you can take advantage
        of Sails' conventional asset pipeline (boilerplate Gruntfile).

        By default, stylesheets from your `assets/styles` folder are included
        here automatically (between STYLES and STYLES END). Both CSS (.css) and LESS (.less)
        are supported. In production, your styles will be minified and concatenated into
        a single file.

        To customize any part of the built-in behavior, just edit `tasks/pipeline.js`.
        For example, here are a few things you could do:

            + Change the order of your CSS files
            + Import stylesheets from other directories
            + Use a different or additional preprocessor, like SASS, SCSS or Stylus
    -->

    <!--STYLES-->
    <link rel="stylesheet" href="/styles/bootstrap-theme.css">
    <link rel="stylesheet" href="/styles/bootstrap-theme.min.css">
    <link rel="stylesheet" href="/styles/bootstrap.css">
    <link rel="stylesheet" href="/styles/bootstrap.min.css">
    <link rel="stylesheet" href="/styles/importer.css">
    <!--STYLES END-->
	
	<style type="text/css">
		.badge-notify{
			   background:red !important;
			   position:relative;
			   top: -8px;
			   left: -5px;

			}
	</style>


  </head>
<nav class="navbar navbar-default navbar-fixed-top">
		<div class="container-fluid">
			<div class="navbar-header">

					<button type="button" class="navbar-toggle" data-toggle="collapse" data-target="#mynavbar">
							<span class="icon-bar"></span>
							<span class="icon-bar"></span>
							<span class="icon-bar"></span>
					</button>
					<a class="navbar-brand" href="http://localhost:1337/">MyApp </a>
			</div>
       <div class="collapse navbar-collapse" id="mynavbar">
		   <ul class="nav navbar-nav">
				<li class="active"><a href="#">HOME</a></li>
				<li clss="dropdown">
					<a class="dropdown-toggle" data-toggle="dropdown" href="#">Tab 1<span class="caret"></span></a>
					<ul class="dropdown-menu">
						<li><a href="#">Sub Tab 1</a></li>
						<li><a href="#">Sub Tab 2</a></li>
						<li><a href="#">Sub Tab 3</a></li>	
					</ul>
				</li>
				<li><a href="#">Tab 2</a></li>
				<li><a href="/user">Users</a></li>
				<li><a href="#">Blog</a></li>
				<li><a href="#">About us</a></li>
				<li><a href="#">Contact us</a></li>
			</ul>
			<ul class="nav navbar-nav navbar-right">
				<li><a href="#"><span class="glyphicon glyphicon-comment"></span><span class="badge badge-notify">1</span>Notification</a></li>
         <% if(!session.authenticated) { %>

				<li><a href="/user/register"><span class="glyphicon glyphicon-user"></span>Sign Up</a></li>
				<li><a href="/session/login"> <span class="glyphicon glyphicon-log-in"></span>Log In</a> </li>
        <% } if(session.authenticated) {  %> 
        <li><a href="/user/show/<%= session.User.id %>">Welcome <%= session.User.name %></a></li>
        <li><a href="/session/destroy"> <span class="glyphicon glyphicon-log-out"></span>Log Out</a> </li>
        <% }  %>  
			</ul>
		</div>
	</div>
</nav>
  <body>
    <%- body %>



    <!--
        Client-side Templates
        ========================

        HTML templates are important prerequisites of modern, rich client applications.
        To work their magic, frameworks like Backbone, Angular, Ember, and Knockout require
        that you load these templates client-side.

        By default, your Gruntfile is configured to automatically load and precompile
        client-side JST templates in your `assets/templates` folder, then
        include them here automatically (between TEMPLATES and TEMPLATES END).

        To customize this behavior to fit your needs, just edit `tasks/pipeline.js`.
        For example, here are a few things you could do:

            + Import templates from other directories
            + Use a different template engine (handlebars, jade, dust, etc.)
            + Internationalize your client-side templates using a server-side
              stringfile before they're served.
    -->

    <!--TEMPLATES-->
    
    <!--TEMPLATES END-->


    <!--

      Client-side Javascript
      ========================

      You can always bring in JS files manually with `script` tags, or asynchronously
      on the client using a solution like AMD (RequireJS).  Or, if you like, you can
      take advantage of Sails' conventional asset pipeline (boilerplate Gruntfile).

      By default, files in your `assets/js` folder are included here
      automatically (between SCRIPTS and SCRIPTS END).  Both JavaScript (.js) and
      CoffeeScript (.coffee) are supported. In production, your scripts will be minified
      and concatenated into a single file.

      To customize any part of the built-in behavior, just edit `tasks/pipeline.js`.
      For example, here are a few things you could do:

          + Change the order of your scripts
          + Import scripts from other directories
          + Use a different preprocessor, like TypeScript

    -->

    <!--SCRIPTS-->
    <script src="/js/dependencies/sails.io.js"></script>
    <script src="/js/dependencies/jquery-1.12.3.min.js"></script>
    <script src="/js/dependencies/jquery.validate.min.js"></script>
    <script src="/js/angular.min.js"></script>
    <script src="/js/bootstrap.min.js"></script>
    <script src="/js/customValidation.js"></script>
    <!--SCRIPTS END-->
  </body>
</html>
